[Category("Filter.Analysis")]
[Summary("")]

shader Average_Advanced_Internal_TextureFX : FilterBase, AddonShaderUtils
{
    const float PW = 13.0f;
    const float kk = 0.8f;

    float4 AveragePass0()
    {
        float4 c = Texture0.Sample(LinearSampler, streams.TexCoord);
	    c.rgb *= c.a;
        return c;
    }

    float4 AveragePass1()
    {
	    float4 c = Texture0.SampleLevel(LinearSampler, streams.TexCoord, Lod(ViewSize));
	    c.rgb /= c.a;
        return c;
    }

    //float4 MaxPass0()
    //{
    //    return pow(Texture0.SampleLevel(LinearSampler, streams.TexCoord, 0), PW) * kk;
    //}

    //float4 MaxPass1()
    //{
    //    return mc = pow(Texture0.SampleLevel(LinearSampler, streams.TexCoord, 33), 1.0 / PW) / kk;
    //}

    int Type = 0;

    float4 Filter(float4 tex0col)
    {
        float4 col = float4(1.0, 1.0, 1.0, 1.0);

        switch(Type)
        {
            case 0 : col = AveragePass0(); break;
            case 1 : col = AveragePass1(); break;
            //case 2 : col = MaxPass0(); break;
            //case 3 : col = MaxPass1(); break;
        }

        return col;
    }
};


//float2 R;
//texture tex0,tex1,tex2;
//sampler s0=sampler_state{Texture=(tex0);AddressU=WRAP;AddressV=WRAP;MipFilter=LINEAR;MinFilter=LINEAR;MagFilter=LINEAR;};
//sampler s1=sampler_state{Texture=(tex1);AddressU=WRAP;AddressV=WRAP;MipFilter=LINEAR;MinFilter=LINEAR;MagFilter=LINEAR;};
//#define PW (13.)
//#define kk (.8);
//float4 AV0(float2 x:TEXCOORD0):color{
//    float4 c=tex2D(s0,x);
//	c.rgb*=c.a;
//    return c;
//}
//float4 AV1(float2 x:TEXCOORD0):color{
//	float4 c=tex2Dlod(s0,float4(x,0,33));
//	c.rgb/=c.a;
//    return c;
//}
//float4 MX0(float2 x:TEXCOORD0):color{
//    float4 c=pow(tex2D(s0,x),PW)*kk;
//    return c;
//}
//float4 MX1(float2 x:TEXCOORD0):color{
//    float4 mc=pow(tex2Dlod(s0,float4(x,0,33)),1./PW)/kk;
//	float4 c=pow(tex2D(s0,x),1./PW);
//	c=mc;
//	//if(x.x>.1)c=c>mc;
//	//if(x.x>.9)c=mc;
//	//c.a=1;
//    return c;
//}

//void vs2d(inout float4 vp:POSITION0,inout float2 uv:TEXCOORD0){vp.xy*=2;uv+=.5/R;}
//technique TAverage{pass pp0{vertexshader=compile vs_3_0 vs2d();pixelshader=compile ps_3_0 AV0();}pass pp0{vertexshader=compile vs_3_0 vs2d();pixelshader=compile ps_3_0 AV1();}}
//technique TMax{pass pp0{vertexshader=compile vs_3_0 vs2d();pixelshader=compile ps_3_0 MX0();}pass pp0{vertexshader=compile vs_3_0 vs2d();pixelshader=compile ps_3_0 MX1();}}